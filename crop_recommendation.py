# -*- coding: utf-8 -*-
"""Crop_Recommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qZwWxS6F_GqHBnDTUvTfDPd9yyeMat_x

# ***Import necessary libraries***
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
from sklearn.preprocessing import StandardScaler
from sklearn.feature_selection import SelectKBest, f_classif

"""# ***Mount Google Drive***"""



"""# ***Load the dataset***"""

df = pd.read_csv("/content/drive/MyDrive/Machine Learning Lab/Project/Crop_recommendation.csv")

"""# ***Drop any incomplete or redundant rows/columns***"""

df = df.dropna()
df = df.drop_duplicates()

"""# ***Split the dataset into features (X) and target variable (y)***"""

X = df[['N', 'P', 'K', 'temperature', 'humidity', 'ph', 'rainfall']]
y = df['label']

"""# ***Normalize the data***"""

scaler = StandardScaler()
X_normalized = scaler.fit_transform(X)

"""# ***Feature Extraction***"""

#Use feature extraction techniques (e.g., SelectKBest)
# Select the top k features based on ANOVA F-statistics
k_best = 5  # You can adjust this value based on your needs
X_featured = SelectKBest(f_classif, k=k_best).fit_transform(X_normalized, y)

"""# ***Split the dataset into training and testing sets***"""

X_train, X_test, y_train, y_test = train_test_split(X_featured, y, test_size=0.2, random_state=42)

"""# ***Initialize different classifiers***"""

classifiers = {
    "Decision Tree": RandomForestClassifier(),
    "Support Vector Machine": SVC(),
    "Logistic Regression": LogisticRegression(),
    "Gaussian Na√Øve Bayes": GaussianNB()
}

"""# ***Train and evaluate each classifier***"""

for name, model in classifiers.items():
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)

    accuracy = accuracy_score(y_test, y_pred)
    conf_matrix = confusion_matrix(y_test, y_pred)
    classification_rep = classification_report(y_test, y_pred)

    print(f"\nResults for {name}:")
    print(f"Accuracy: {accuracy}")
    print("Confusion Matrix:")
    print(conf_matrix)
    print("Classification Report:")
    print(classification_rep)

"""# ***Plotting the confusion matrix***"""

plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", xticklabels=model.classes_, yticklabels=model.classes_)
plt.title(f"Confusion Matrix - {name}")
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.show()